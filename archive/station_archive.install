<?php


/**
 * Install the initial schema.
 */
function station_archive_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("
        CREATE TABLE {station_archive_item} (
          `audio_nid` INTEGER UNSIGNED NOT NULL DEFAULT 0,
          `program_nid` INTEGER UNSIGNED NOT NULL DEFAULT 0,
          `aired` INTEGER UNSIGNED NOT NULL DEFAULT 0,
          `imported` INTEGER UNSIGNED NOT NULL DEFAULT 0,
          `permanent` int(2) UNSIGNED NOT NULL DEFAULT '0',
          PRIMARY KEY(`audio_nid`, `program_nid`),
          KEY `station_archive_cleanup` (`permanent`,`imported`)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;
      ");
      db_query("
        CREATE TABLE {station_archive_program} (
          `program_nid` INTEGER UNSIGNED NOT NULL DEFAULT 0,
          `title` VARCHAR(128) NOT NULL DEFAULT '',
          PRIMARY KEY(`program_nid`)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;
      ");
      break;
  }
}

/**
 * Implementation of hook_uninstall().
 */
function station_archive_uninstall() {
  // Remove our tables.
  db_query('DROP TABLE {station_archive_item}');
  db_query('DROP TABLE {station_archive_program}');

  // Remove our taxonomy.
  if ($vid = variable_get('station_archive_vid', '')) {
    taxonomy_del_vocabulary($vid);
  }

  // Remove our variables.
  $variables = array(
    'station_archive_cleanup_old',
    'station_archive_delete_unscheduled',
    'station_archive_import_new',
    'station_archive_import_dir',
    'station_archive_max_age',
    'station_archive_promote_scheduled',
    'station_archive_title_format',
    'station_archive_unscheduled_title',
    'station_archive_vid',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Create the table and migrate in the tables
 */
function station_archive_update_1() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      // create a table
      $ret[] = update_sql("
        CREATE TABLE {station_archive} (
          `audio_nid` INTEGER UNSIGNED NOT NULL DEFAULT 0,
          `program_nid` INTEGER UNSIGNED NOT NULL DEFAULT 0,
          `imported` INTEGER UNSIGNED NOT NULL DEFAULT 0,
          `permanent` INT(2) NOT NULL DEFAULT '0',
          PRIMARY KEY(`audio_nid`, `program_nid`),
          KEY `station_archive_cleanup` (`permanent`,`imported`)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;
      ");
      // if we've got a taxonomy, record any nodes in it in the table
      if ($vid = _station_archive_get_vid()) {
        $ret[] = update_sql('INSERT INTO {station_archive} (audio_nid, program_nid, imported)
          SELECT DISTINCT n.nid, 0, n.created FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid
          WHERE td.vid = '. (int) $vid);
      }

      break;
  }
  return $ret;
}

/**
 * Create a table to track program titles
 */
function station_archive_update_2() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      // create a table
      $ret[] = update_sql("
        CREATE TABLE {station_archive_program} (
          `program_nid` INTEGER UNSIGNED NOT NULL DEFAULT 0,
          `title` VARCHAR(128) NOT NULL DEFAULT '',
          PRIMARY KEY(`program_nid`)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;
      ");
      // find titles for programs by looking for two different audio nodes with the same title
      $ret[] = update_sql("
        INSERT INTO {station_archive_program} (program_nid, title)
        SELECT DISTINCT s1.program_nid, n1.title
        FROM {station_archive} s1 JOIN {station_archive} s2 ON s1.program_nid = s2.program_nid
        JOIN {node} n1 ON s1.audio_nid = n1.nid
        JOIN {node} n2 ON s2.audio_nid = n2.nid
        WHERE n1.title = n2.title AND n1.nid <> n2.nid;
      ");

      break;
  }
  return $ret;
}

/**
 * Add a field to track permanent audio, and an index for the clean up query
 */
function station_archive_update_3() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("
        ALTER TABLE {station_archive}
          ADD COLUMN `permanent` INT(2) UNSIGNED NOT NULL DEFAULT 0 AFTER `imported`,
          ADD INDEX `station_archive_cleanup`(`permanent`, `imported`);
      ");
      break;
  }
  return $ret;
}

/**
 * Empty update to set a schema number
 */
function station_archive_update_100() {
  return array();
}

/**
 * Correct the station archive's {vocabulary}.module value.
 */
function station_archive_update_5200() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("UPDATE {vocabulary} SET module = 'station_archive' WHERE module = 'stationarchive'");
      break;
  }
  return $ret;
}

/**
 * Add rename {station_archive} to {station_archive_item} and add a .aired
 * column to record the node's original air date. Use the node's creation date
 * as a default value.
 */
function station_archive_update_5201() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {station_archive} RENAME TO {station_archive_item}");
      $ret[] = update_sql("ALTER TABLE {station_archive_item} ADD COLUMN `aired` INTEGER UNSIGNED NOT NULL DEFAULT 0 AFTER `program_nid`");
      $ret[] = update_sql("UPDATE {station_archive_item} sai INNER JOIN {node} n ON sai.audio_nid = n.nid SET sai.aired = n.created WHERE n.type = 'audio'");
      break;
  }
  return $ret;
}
