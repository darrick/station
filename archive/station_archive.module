<?php

// $Id$

require_once(drupal_get_path('module', 'station') .'/dayhour.inc');

function station_archive_help($section = '') {
  switch ($section) {
    case 'admin/modules#description':
      return t('Provides a webstream archive based on the audio module.');
    case 'admin/settings/stationarchive':
      return t('Configure the station archive.');
    default:
      return null;
  }
}

function station_archive_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'last',
      'title' => t('show archive'),
      'callback' => 'station_archive_view_html',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'last/hours',
      'callback' => 'station_archive_view_hours_html',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );

    $items[] = array(
      'path' => 'rss',
      'title' => t('rss show archive'),
      'callback' => 'station_archive_view_rss',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'rss/hours',
      'callback' => 'station_archive_view_hours_rss',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

function station_archive_view_html($dayname = NULL, $hourname = NULL) {
  if (!is_null($dayname)) {
    $day = station_valid_day($dayname);
    $vid = _station_archive_get_vid();
    if ($dayterm = _station_archive_get_day_term($vid, $day)) {
      $tid = $dayterm['tid'];

      if (!is_null($hourname)) {
        $hour = station_valid_hour($hourname);
        if ($hourterm = _station_archive_get_hour_term($dayterm, $hour)) {
          $tid = $hourterm['tid'];
        }
      }
      drupal_goto('taxonomy/term/'. $tid);
    }
  }
  drupal_not_found();
}

function station_archive_view_rss($dayname = NULL, $hourname = NULL) {
  if (!is_null($dayname)) {
    $day = station_valid_day($dayname);
    $vid = _station_archive_get_vid();
    if ($dayterm = _station_archive_get_day_term($vid, $day)) {
      $tid = $dayterm['tid'];

      if (!is_null($hourname)) {
        $hour = station_valid_hour($hourname);
        if ($hourterm = _station_archive_get_hour_term($dayterm, $hour)) {
          $tid = $hourterm['tid'];
        }
      }

      drupal_goto('taxonomy/term/'. $tid .'/0/feed');
    }
  }
  drupal_not_found();
}

function station_archive_view_hours_html($hour_string) {
  $title = t('Shows on...');
  $rss_url = url('rss/hours/'. str_replace(' ', '+', $hour_string));

  $attributes = array(
    'rel' => 'alternate',
    'type' => 'application/rss+xml',
    'title' => t('RSS - %title', array('%title' => $title)),
    'href' => $rss_url,
  );
  drupal_set_html_head('<link'. drupal_attributes($attributes) ." />\n");
  drupal_set_title($title);

  $vid = _station_archive_get_vid();
  $tids = _station_archive_get_hour_tids($vid, $hour_string);
  $result = taxonomy_select_nodes($tids, 'or', 0, FALSE);
  while ($node = db_fetch_object($result)) {
    $output .= node_view(node_load($node), 1);
  }
  $output .= theme('feed_icon', $rss_url);

  return $output;
}

function station_archive_view_hours_rss($hour_string) {
  $title = t('Shows on...');
  $desc = t('Description of shows...');

  $vid = _station_archive_get_vid();
  $tids = _station_archive_get_hour_tids($vid, $hour_string);
  $result = taxonomy_select_nodes($tids, 'or', 'all', FALSE);

  $channel['title'] = $title;
  $channel['description'] = $desc;

  return node_feed($result, $channel);
}

function station_archive_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Station Archive: Current program (via RPC)');
      $blocks[1]['info'] = t('Station Archive: Browse by taxonomy');
      return $blocks;

    case 'view':
      if (user_access('access content')) {
        switch($delta) {
          case 0:
            $block['subject'] = t('On Air');
            $block['content'] = _station_archive_program_block();
            break;
          case 1:
            $block['subject'] = t('Browse by day');
            $block['content'] = _station_archive_browse_block();
            break;
        }
        return $block;
      }
  }
}

/**
 * Return HTML body showing the current program.
 *
 * @return string
 */
function _station_archive_program_block() {
  $url = variable_get('station_archive_station_url', '');
  if (!$url) {
    return;
  }

  // current program
  if ($program = _station_archive_get_program_at(time())) {
    $output = '<a href="'. $program['node_url'] .'">'. $program['title'] .'</a>';
  } else {
    $output = t("We're on auto pilot");
  }
  $output .= '<br />';

  // webstream links
  $high = variable_get('station_stream_high_url', '');
  $low = variable_get('station_stream_low_url', '');
  if ($high || $low) {
    $output .= t('Tune in:');
    if ($high) {
      $output .= ' <a href="'. check_url($high) .'">'. t('High') .'</a>';
    }
    if ($low) {
      $output .= ' <a href="'. check_url($low) .'">'. t('Low') .'</a>';
    }
  }

  return $output;
}

/**
 * Return HTML for browsing the taxonomy
 *
 * @return string
 */
function _station_archive_browse_block() {
  $vid = _station_archive_get_vid();
  $tree = taxonomy_get_tree($vid);
  if ($tree) {
    foreach ($tree as $term) {
      if ($term->depth == 0) {
        $items[] = l($term->name, 'taxonomy/term/'. $term->tid);
      }
    }
    return theme('item_list', $items);
  }
}

/**
 * Checks the existence of the directory specified in $form_element. If
 * validation fails, the form element is flagged with an error from within the
 * file_check_directory function.
 *
 * @param $form_element
 *   The form element containing the name of the directory to check.
 * @see system_check_directory()
 */
function _station_archive_settings_check_directory($form_element) {
  file_check_directory($form_element['#value'], 0, $form_element['#parents'][0]);
  return $form_element;
}

function station_archive_settings() {
  $ageoptions = drupal_map_assoc(array(86400, 172800, 259200, 345600, 432000, 518400, 604800, 1209600, 1814400, 2419200, 3024000, 3628800, 4233600), 'format_interval');

  $form['station_archive_import'] = array(
    '#type' => 'fieldset',
    '#title' => t('Import'),
    '#collapsible' => FALSE,
  );
  $form['station_archive_import']['station_archive_import_new'] = array(
    '#type' => 'checkbox',
    '#title' => t('Import new audio'),
    '#default_value' => variable_get('station_archive_import_new', 1),
    '#description' => t("If this is checked, audio files left in the import directory will be added to the archive. The only reason to uncheck this is if you're running into a bug and want to stop imports until it can be fixed."),
  );
  $form['station_archive_import']['station_archive_import_dir'] = array(
    '#type' => 'textfield',
    '#title' => t('Import path'),
    '#default_value' => variable_get('station_archive_import_dir', ''),
    '#after_build'=>'_station_archive_settings_check_directory',
    '#description' => t('The directory where new MP3s are left by the stream ripper script. Drupal will need to have write access to this directory so we can move the file.'),
    '#required' => TRUE,
  );

  $form['station_archive_cleanup'] = array(
    '#type' => 'fieldset',
    '#title' => t('Clean up'),
    '#collapsible' => FALSE,
  );
  $form['station_archive_cleanup']['station_archive_cleanup_old'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove old audio'),
    '#default_value' => variable_get('station_archive_cleanup_old', 1),
    '#description' => t("If this is checked, audio that's older than the maximum age will be removed."),
  );
  $form['station_archive_cleanup']['station_archive_max_age'] = array(
    '#type' => 'select',
    '#title' => t('Maximum age'),
    '#default_value' => variable_get('station_archive_max_age', 604800),
    '#options' => $ageoptions,
    '#description' => t("Audio that's been in the archive longer than this will be removed."),
    '#required' => TRUE,
  );
  $form['station_archive_station_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL of Station module'),
    '#default_value' => variable_get('station_archive_station_url', ''),
    '#description' => t("The station archive module is designed to connect, via XML-RPC, to a Drupal server running the station module to retrieve metadata on scheduled programs. If this is left blank, no connection will be attempted. Don't include a trailing slash. Example: http://example.com or http://example.com/drupal"),
  );

  return $form;
}


/**
 * Cron task: remove old files, import new ones.
 */
function station_archive_cron() {
  // HACK: we overwrite the user so that the cron user can get around the
  // permissions check and delete old audio nodes.
  global $user;
  $olduser = $user;
  $user = user_load(array('uid'=>1));

  if (variable_get('station_archive_cleanup_old', 1) == 1) {
    _station_archive_delete_old_nodes();
  }
  if (variable_get('station_archive_import_new', 1) == 1) {
    _station_archive_import_files();
  }

  // make sure we restore the old user so we don't screw something else up in
  // the cron run
  $user = $olduser;
}

/**
 * Find and delete old archived audio nodes.
 *
 * We need to make sure we only delete nodes created by this module. So, we
 * search look at nodes included in our taxonomy.
 */
function _station_archive_delete_old_nodes() {
  $vid = _station_archive_get_vid();
  $cutoff = time() - variable_get('station_archive_max_age', 604800);
  $db_result = db_query('SELECT n.nid, n.title FROM term_data td INNER JOIN term_node tn ON td.tid = tn.tid INNER JOIN node n ON tn.nid = n.nid WHERE td.vid = %d AND n.created < %d', $vid, $cutoff);
  while ($node = db_fetch_object($db_result)) {
    watchdog('stationarchive', t('Deleted %title.', array('%title' => theme('placeholder', $node->title))), WATCHDOG_NOTICE);
    node_delete($node->nid);
  }
}

/**
 * Scan the import directory looking for MP3s to import.
 */
function _station_archive_import_files() {
  // locate new mp3s in the import directory
  if ($dirpath = variable_get('station_archive_import_dir', '')) {
    $files = file_scan_directory($dirpath, '[:digit:]*\.mp3$');
    foreach ($files as $file) {
      $cuefile = dirname($file->filename) .'/'. $file->name .'.cue';
      // if there's a .cue file, it's still being downloaded, we'll get it on
      // the next cron call.
      if (!file_exists($cuefile)) {
        $status = _station_archive_add_file($file);
        // if there was a problem stop the import
        if (!$status) {
          return;
        }
      }
    }
  }
}

/**
 * Create an audio node for an MP3, named with an hour's timestamp. Use the
 * timestamp to load the program information.
 *
 * @param $file
 *   Drupal file object.
 *   @return boolean indicating success
 */
function _station_archive_add_file($file) {
  // load timestamp from filename (should be simply timestamp.mp3)
  $timestamp = (integer) $file->name;

  // connect via XML-RPC to the station module and find program info based on
  // timestamp
  $program = _station_archive_get_program_at($timestamp);
  if ($program === FALSE) {
    // couldn't get the program info, configuation error?
    watchdog('stationarchive', t("Couldn't load the program's metadata. We'll retry the import on the next cron run."), WATCHDOG_WARNING);
    return FALSE;
  }

  // assign the metadata
  $prettydate = date('ga \o\n M jS, Y', $timestamp);
  if ($program) {
    $audio_tags['title'] = $program['title'];
    $audio_tags['artist'] = station_anded_list($program['djs']);
    $audio_tags['genre'] = $program['genre'];
    $audio_tags['url_source'] = $program['node_url'];

    // rename the file to something more readable than a timestamp
    $newname = str_replace(' ', '_', $program['title'] .' ('. $prettydate .').mp3');
    file_move($file->filename, $newname, FILE_EXISTS_REPLACE);
  }
  else {
    // if we can't get the metadata, improvise!
    $audio_tags['title'] = t('DJ Auto mix');
  }
  $audio_tags['recording_time'] = gmdate('Y-m-d\TG:i', $timestamp);
  $audio_tags['year'] = date('Y', $timestamp);
  $audio_tags['comment'] = t('Recorded at %date', array('%date' => $prettydate));

  // then create a new audio node with iT
  $node = audio_api_insert($file->filename, '%title', $audio_tags);
  $node->created = $timestamp;
  $node->audio_fileinfo['downloadable'] = 1;

  // find/create the proper taxonomic terms based on day and hour
  $node->taxonomy = _station_archive_get_taxonomy($timestamp);

  // only promote tracks with proper metadata
  $node->promote = ($program) ? 1 : 0;

  node_save($node);

  // and make note of the import
  watchdog('stationarchive', t('Imported %title.', array('%title' => theme('placeholder', $node->title))), WATCHDOG_NOTICE, l(t('view'), 'node/'. $node->nid));

  return TRUE;
}

/**
 * Connect via RPC to the station server and load program information.
 *
 * @param $timestamp
 *   UNIX timestamp indicating the day an hour of programing to load.
 * @return
 *   False if there was an error loading the data or an array of the program
 *   if everything worked out.
 */
function _station_archive_get_program_at($timestamp) {
  $url = variable_get('station_archive_station_url', '');
  if ($url) {
    $program = xmlrpc(check_url($url .'/xmlrpc.php'), 'station.program.get.at', $timestamp);

    if (xmlrpc_errno()) {
      watchdog('stationarchive', t('Failed to load program info. Error %code : %message', array('%code' => theme('placeholder', xmlrpc_errno()), '%message' =>  theme('placeholder', xmlrpc_error_msg()))), WATCHDOG_ERROR, l(t('view'), 'node/'. $node->nid));
    }
    else {
      return $program;
    }
  }

  return FALSE;
}

/**
 * Find or create a station archive vocabulary id.
 */
function _station_archive_get_vid() {
  $vid = variable_get('station_archive_vid', '');
  if (empty($vid)) {
    // Check to see if a stationarchive vocabulary exists
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = '%s'", 'stationarchive'));
    if (!$vid) {
      $vocab = array(
        'name' => 'Station Archive',
        'description' => t("This vocabulary is used by the Station Archive module to track the audio nodes it's added."),
        'help' => t("Do not add nodes to this vocabulary unless you want the station archive module to delete them when they're older than the maximum archive age."),
        'multiple' => 1,
        'required' => 0,
        'hierarchy' => 1,
        'relations' => 0,
        'module' => 'stationarchive',
        'nodes' => array('audio' => 1),
      );
      taxonomy_save_vocabulary($vocab);
      $vid = $vocab['vid'];
    }
    variable_set('station_archive_vid', $vid);
  }
  return $vid;
}

/**
 * Find/create the term ids for a day and hour based on a timestamp.
 *
 * @param $timestamp
 * @return array
 */
function _station_archive_get_taxonomy($timestamp) {
  $vid = _station_archive_get_vid();
  $day = date('w', $timestamp);
  $hour = date('G', $timestamp);

  $dayterm = _station_archive_get_day_term($vid, $day);
  if (!$dayterm) {
    $dayterm = array('vid' => $vid, 'name' => station_day_name($day),'weight' => $day - 7);
    taxonomy_save_term($dayterm);
  }

  $hourterm = _station_archive_get_hour_term($dayterm, $hour);
  if (!$hourterm) {
    $hourterm = array('vid' => $dayterm['vid'], 'parent' => $dayterm['tid'], 'name' => station_hour_name($hour), 'weight' => $hour);
    taxonomy_save_term($hourterm);
  }

  return array($dayterm['tid'], $hourterm['tid']);
}

/**
 * Give a string with hours return an array of vocabulary term ids for the
 * given hours.
 *
 * @param $vid
 *   integer vocabulary id
 * @param $hour_string
 *   string with hours values, integers from 1 to 168 separated by spaces
 */
function _station_archive_get_hour_tids($vid, $hour_string = '') {
  $ids = array();
  foreach (explode(' ', $hour_string) as $id) {
    $id = (integer) $id;
    if ($id > 0 && $id <= 24*7) {
      $ids[] = $id;
    }
  }
  sort($ids);

  $tids = array();
  foreach ($ids as $id) {
    $day = (integer) (($id - 1) / 24);
    $hour = ($id - 1) % 24;

    if ($dayterm = _station_archive_get_day_term($vid, $day)) {
      if ($hourterm = _station_archive_get_hour_term($dayterm, $hour)) {
        $tids[] = $hourterm['tid'];
      }
    }
  }

  return $tids;
}

/**
 * Find the taxonomy term for a day.
 *
 * @param $vid
 *   our vocabulary id
 * @param $day
 *   integer day between 0 and 6
 * @return
 *   array with a day's taxonomy term, false if it doesn't exist
 */
function _station_archive_get_day_term($vid, $day) {
  $dayname = station_day_name($day);
  $db_result = db_query(db_rewrite_sql("SELECT t.tid, t.* FROM {term_data} t WHERE t.vid = %d AND LOWER('%s') LIKE LOWER(name)", 't', 'tid'), array($vid, trim($dayname)));
  return db_fetch_array($db_result);
}

/**
 * Find or create taxonomy term for a day.
 *
 * @param $dayterm
 *   array day taxonomy term
 * @param $hour
 *   integer hour between 0 and 23
 * @return
 *   array with an hour's taxonomy term, false if it doesn't exist
 */
function _station_archive_get_hour_term($dayterm, $hour) {
  $hourname = station_hour_name($hour);
  $db_result = db_query(db_rewrite_sql("SELECT d.tid, d.* FROM {term_data} d INNER JOIN {term_hierarchy} h ON d.tid = h.tid WHERE d.vid = %d AND h.parent = %d AND LOWER('%s') LIKE LOWER(name)", 't', 'tid'), array($dayterm['vid'], $dayterm['tid'], trim($hourname)));
  return db_fetch_array($db_result);
}

