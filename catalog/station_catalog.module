<?php
// $Id$

define('STATION_CATALOG_CVS_ID', '$Id$');

if (module_exists('views')) {
  require_once(drupal_get_path('module', 'station_catalog') .'/views.inc');
#  require_once(drupal_get_path('module', 'station_catalog') .'/views_defaults.inc');
}


function station_catalog_help($section='') {
  switch ($section) {
    case 'admin/settings/station/catalog':
      return t("These settings allow you to configure the station catalog.");
  }
}

function station_catalog_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/station/catalog',
      'title' => t('Catalog'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'station_catalog_admin_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_LOCAL_TASK
    );

    $items[] = array(
      'path' => 'station/catalog/search',
      'title' => t('Catalog'),
      'callback' => 'station_catalog_search_page',
      'access' => user_access('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}


function station_catalog_admin_settings() {
  $form = array();
  $form['module_cvs_id'] = array(
    '#type' => 'item',
    '#value' => '<pre>'. STATION_CATALOG_CVS_ID .'</pre>',
  );
  return $form;
}


/**
 * Implementation of hook_node_info().
 */
function station_catalog_node_info() {
  return array(
    'station_album' => array(
      'name' => t('Album'),
      'module' => 'station_catalog_album',
      'description' => t("An album in the station's library."),
      'has_title' => FALSE,
      'has_body' => TRUE,
      'body_label' => t('Description'),
    )
  );
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the station module
 */
function station_catalog_perm() {
  return array(
    'view catalog',
    'create album content',
    'edit album content',
    'administer catalog',
  );
}

function station_catalog_album_access($op, $node) {
  global $user;

  // Admins can do anything.
  if (user_access('administer catalog')) {
    return TRUE;
  }
  
  switch ($op) {
    case 'view':
      return user_access('view catalog');

    case 'create':
      return user_access('create album content');

    case 'update':
    case 'delete':
      return user_access('edit album content');
  }
}

/**
 * Build a form for program nodes.
 */
function station_catalog_album_form($node) {
  $form['album'] = array(
    '#type' => 'fieldset',
    '#title' => t('Album information'),
    '#tree' => TRUE,
    '#weight' => -4,
  );
  $form['album']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number'),
    '#default_value' => $node->album['number'],
    '#required' => TRUE,
    '#description' => t("The album's log number must be numeric and unique."),
  );
  $form['album']['artist'] = array(
    '#type' => 'textfield',
    '#title' => t('Artist'),
    '#default_value' => $node->album['artist'],
    '#required' => TRUE,
    '#maxlength' => 255,
  );
  $form['album']['album'] = array(
    '#type' => 'textfield',
    '#title' => t('Album title'),
    '#default_value' => $node->album['album'],
    '#required' => TRUE,
    '#maxlength' => 255,
  );
  $form['album']['year'] = array(
    '#type' => 'textfield',
    '#title' => t('Year'),
    '#default_value' => $node->album['year'],
    '#required' => TRUE,
    '#description' => t("The year the album was released."),
  );
  $form['album']['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#default_value' => $node->album['label'],
    '#required' => TRUE,
    '#maxlength' => 255,
    '#description' => t("The year the album was released."),
  );

  if ($type->has_body) {
    $form['body_filter']['body'] = array(
      '#type' => 'textarea',
      '#title' => check_plain($type->body_label),
      '#default_value' => $node->body,
      '#rows' => 10,
      '#required' => ($type->min_word_count > 0),
    );
    $form['body_filter']['format'] = filter_form($node->format);
  }

  return $form;
}

function station_catalog_album_validate(&$node, &$form) {
  if (!is_numeric($node->album['number'])) {
    form_set_error('number', 'Album number must be a numeric value');
  }
  else if ($node->album['number']) {
    // look for duplicate numbers
    if ($node->nid) {
      $query = db_query('SELECT sc.nid, n.title FROM {station_catalog} sc INNER JOIN {node} n ON sc.nid = n.nid WHERE sc.number = %d AND sc.nid <> %d', $node->album['number'], $node->nid);
    }
    else {
      $query = db_query('SELECT sc.nid, n.title FROM {station_catalog} sc INNER JOIN {node} n ON sc.nid = n.nid WHERE sc.number = %d', $node->album['number']);
    }
    if ($other_node = db_fetch_object($query)) {
      form_set_error(
        'number',
        t('Another album <a href="@link">%title</a> already has this number.', array('@link' => url('node/'. $other_node->nid), '%title' => $other_node->title))
      );
    }
  }

  if (!is_numeric($node->album['year'])) {
    form_set_error('year', 'Year must be a numeric value');
  }

  // Compute the title.
  form_set_value($form['title'], $node->album['artist'] .' - '. $node->album['album']);
}

function station_catalog_album_load($node) {
  $result = db_query('SELECT number, artist, album, year, label FROM {station_catalog} WHERE nid = %d', $node->nid);
  return array('album' => db_fetch_array($result)); 
}

function station_catalog_album_insert($node) {
  db_query("INSERT INTO {station_catalog} (nid, number, artist, album, year, label) VALUES (%d, %d, '%s', '%s', %d, '%s')", $node->nid, $node->album['number'], $node->album['artist'], $node->album['album'], $node->album['year'], $node->album['label']);
}

function station_catalog_album_delete($node) {
  db_query("DELETE FROM {station_catalog} WHERE nid = %d", $node->nid);
}

function station_catalog_album_update($node) {
  db_query("DELETE FROM {station_catalog} WHERE nid = %d", $node->nid);
  db_query("INSERT INTO {station_catalog} (nid, number, artist, album, year, label) VALUES (%d, %d, '%s', '%s', %d, '%s')", $node->nid, $node->album['number'], $node->album['artist'], $node->album['album'], $node->album['year'], $node->album['label']);
}

function station_catalog_album_view(&$node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  if ($page) {
    $breadcrumb = array();
    $breadcrumb[] = array('path' => 'station/catalog', 'title' => t('Catalog'));
    $breadcrumb[] = array('path' => 'node/'. $node->nid);
    menu_set_location($breadcrumb);
  }

  $node->content['album'] = array(
    'number' => array(
      '#type' => 'item',
      '#title' => t('Number'),
      '#value' => $node->album['number'],
      '#weight' => -6,
    ),
    'artist' => array(
      '#type' => 'item',
      '#title' => t('Artist'),
      '#value' => $node->album['artist'],
      '#weight' => -5,
    ),
    'album' => array(
      '#type' => 'item',
      '#title' => t('Album'),
      '#value' => $node->album['album'],
      '#weight' => -4,
    ),
    'year' => array(
      '#type' => 'item',
      '#title' => t('Year'),
      '#value' => $node->album['year'] ? $node->album['year'] : '',
      '#weight' => -3,
    ),
    'label' => array(
      '#type' => 'item',
      '#title' => t('Label'),
      '#value' => $node->album['label'],
      '#weight' => -2,
    ),
  );

  return $node;
}

/**
 * Implementation of hook_taxonomy().
 * 
 * Delete our vocabulary variable if the vocabulary is deleted.
 */
function station_catalog_taxonomy($op, $type, $object = NULL) {
  if ($op == 'delete' && $type == 'vocabulary' && $object->vid == _station_archive_get_vid())  {
    variable_del('station_category_vocabulary');
  }
}


/**
 * Find or create a station catalog vocabulary ID.
 *
 * @return
 *   Vocabulary ID.
 */
function _station_catalog_get_vid() {
  $vid = variable_get('station_category_vocabulary', '');
  if (empty($vid)) {
    // Check to see if a a  vocabulary exists
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = '%s'", 'station_catalog'));
    if (!$vid) {
      $vocabulary = array(
        'name' => t('Station album genres'),
        'description' => t("Select the appropriate genre's for this album."),
        'multiple' => '1', 
        'required' => '1', 
        'hierarchy' => '0', 
        'relations' => '0', 
        'module' => 'station_catalog', 
        'nodes' => array('station_album' => 1),
      );
      taxonomy_save_vocabulary($vocabulary);
      $vid = $vocabulary['vid'];
    }
    variable_set('station_category_vocabulary', $vid);
  }
  return $vid;
}

function station_catalog_search_page($field = '', $value ='') {
  $perpage = 30;

  $header = array(
    'number' => array('data' => t('Number'), 'field' => 'sc.number'),
    'artist' => array('data' => t('Artist'), 'field' => 'sc.artist'),
    'album' => array('data' => t('Album'), 'field' => 'sc.album'),
    'year' => array('data' => t('Year'), 'field' => 'sc.year'),
    'label' => array('data' => t('Label'), 'field' => 'sc.label'),
  );

  // Only search when there's a value and the field is valid.
  if (!empty($value) && in_array($field, array('number', 'artist', 'album', 'year', 'label'))) {
    $header[$field]['sort'] = 'asc';
    $result = pager_query("SELECT n.nid, sc.* FROM {node} n INNER JOIN {station_catalog} sc ON n.nid = sc.nid WHERE LOWER(sc.%s) LIKE LOWER('%%%s%%')". tablesort_sql($header), $perpage, 0, NULL, $field, $value);
  }
  else {
    $header['number']['sort'] = 'desc';
    $result = pager_query("SELECT n.nid, sc.* FROM {node} n INNER JOIN {station_catalog} sc ON n.nid = sc.nid". tablesort_sql($header), $perpage, 0);
  }

  $rows = array();
  while ($item = db_fetch_object($result)) {
    $link = 'node/'. $item->nid;
    $rows[] = array(
      array('data' => l($item->number, $link)),
      array('data' => l($item->artist, $link)),
      array('data' => l($item->album, $link)),
      array('data' => $item->year ? $item->year : ''),
      array('data' => $item->label)
    );
  }
  
  if (!$rows) {
    $rows[] = array(array('colspan' => 4, 'data' => t('No matches were found.')));
  }

  $output .= '<div id="station-catalog-search">';
  $output = drupal_get_form('station_catalog_search_form', $field, $value);
  $output .= '<div id="station-catalog-search-results">';
  $output .= theme('pager', array(), $perpage);
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', array(), $perpage);
  $output .= '</div></div>';
  return $output;
}

function station_catalog_search_form($field = '', $value ='') {
  $form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search options'),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['search']['field'] = array(
    '#type' => 'select',
    '#title' => t('Field'),
    '#options' => array(
      'artist' => t('Artist'), 
      'album' => t('Album'), 
      'label' => t('Label'),
      'number' => t('Number'),
      'year' => t('Year'),
    ),
    '#default_value' => $field,
  );
  $form['search']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
    '#default_value' => $value,
    '#required' => TRUE,
  );
  $form['search']['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Submit')
  );
  return $form;
}

function station_catalog_search_form_submit($form_id, $form_values) {
  // Make sure it's an allowed search field.
  if (in_array($form_values['field'], array('number', 'artist', 'album', 'year', 'label'))) {
    return 'station/catalog/search/'. $form_values['field'] .'/'. $form_values['value'];
  }
}

