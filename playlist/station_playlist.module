<?php

define('STATION_PLAYLIST_CVS_ID', '$Id$');

if (module_exists('views')) {
  require_once(drupal_get_path('module', 'station_playlist') .'/views.inc');
  require_once(drupal_get_path('module', 'station_playlist') .'/views_defaults.inc');
}


/**
 * Display help and module information
 * @param section which section of the site we're displaying help
 * @return help text for section
 */
function station_playlist_help($section='') {
  switch ($section) {
    case 'admin/settings/station/playlist':
      return t("These settings allow you to configure the playlist node.");
    default:
      return null;
  }
}

function station_playlist_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/station/playlist',
      'title' => t('Playlist'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('station_playlist_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_LOCAL_TASK
    );

    $items[] = array(
      'path' => 'station/autocomplete/playlist',
      'title' => t('Playlist Autocomplete'),
      'callback' => 'station_playlist_autocomplete',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
  }
  return $items;
}

function station_playlist_node_info() {
  return array(
    'station_playlist' => array(
      'name' => t('Program Playlist'),
      'module' => 'station_playlist',
      'description' => t("A playlist lets your listeners see a list of all the music played during a program. It also allows the music director to easily chart what's being played."),
    )
  );
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the station module
 */
function station_playlist_perm() {
  return array(
    'create playlists',
    'edit own playlists',
  );
}

function station_playlist_admin_settings() {
  $form = array();
  $form['module_cvs_id'] = array(
    '#type' => 'item',
    '#value' => '<pre>'. STATION_PLAYLIST_CVS_ID .'</pre>',
  );
  return $form;
}

/**
 * Implementation of hook_link().
 *
 * This is implemented so that an edit link is displayed for users who have
 * the rights to edit a node.
 */
function station_playlist_link($type, $node = NULL, $teaser = FALSE) {
  if ($type == 'node') {
    switch ($node->type) {
      case 'program':
        $links = array();
        if ($result = db_result(db_query("SELECT COUNT(nid) FROM {station_playlist} sp WHERE sp.program_nid = %d", $node->nid))) {
          $links['station_station_playlist_view'] = array(
            'title' => t('View all playlists'),
            'href' => 'station/playlists/'. $node->nid,
          );
        }

        if (!$teaser) {
          if (node_access('update', $node)) {
            $links['station_station_playlist_add'] = array(
              'title' => t('Add new playlist'),
              'href' => 'node/add/station_playlist/'. $node->nid,
            );
          }
        }
        return $links;

      case 'station_playlist':
        return array('station_program_program_view' => array(
          'title' => t('View program'),
          'href' => 'node/'. $node->program_nid,
        ));
    }
  }
  return array();
}


function station_playlist_access($op, $node) {
  global $user;

  if (user_access('administer schedule')) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
      return user_access('access content');
      break;

    case 'create':
      return user_access('create playlists');
      break;

    case 'update':
    case 'delete':
      if (user_access('edit own playlists') && ($user->uid == $node->uid)) {
        return TRUE;
      }
      break;
  }
  return FALSE;
}

/**
 * Build a form for playlist nodes.
 */
function station_playlist_form(&$node) {
  // if this is a new node (with no nid) and we've got a numeric argument,
  // assume that's the program we should attach to.
  if (!$node->nid) {
    if (is_numeric(arg(3))) {
      $node->program_nid = (int) arg(3);
    }
    // and new nodes need a default date
    $date = getdate();
    $node->program_date = array(
      'month' => $date['mon'],
      'day' => $date['mday'],
      'year' => $date['year']
    );
  }

  // make sure we've got a valid program title
  if (!isset($node->program_title) && isset($node->program_nid)) {
    $program = node_load(array(
      'nid' => $node->program_nid,
      'type' => 'program'
    ));
    $node->program_title = $program->title;
  }

  $form['program_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Program'),
    '#default_value' => $node->program_title,
    '#maxlength' => 128,
    '#autocomplete_path' => 'station/autocomplete/program',
    '#required' => TRUE,
    '#description' => t('The name of the program. If you filled in for someone else, enter the name of their program.'),
  );
  $form['program_date'] = array(
    '#type' => 'date',
    '#title' => t('Program date'),
    '#default_value' => $node->program_date,
    '#required' => TRUE,
    '#description' => t('The date the program aired.'),
  );
  $form['tracks'] = array(
    '#type' => 'fieldset', '#title' => t('Tracks'),
    '#tree' => TRUE, '#collapsible' => FALSE, '#weight'=>1,
    '#theme' => 'station_playlist_track_form',
    '#description' => t('Enter the tracks played on the show, the artist and title are required. If you provide a link, it needs to begin with <code>http://</code> or you will get a link to a page on this site.') .'<br />'
      . t('The weight is used to set the order: lower weights rise, heavier sink. If you want to remove a track just clear the artist and title text boxes. If you need more tracks, just save, more will be added. '),
  );
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $node->body,
    '#rows' => 5,
  );
  $form['body_filter']['format'] = filter_form($node->format);


  $blanks = 10;
  $weight = 0;
  $max = max(20, $blanks + count($node->tracks) + 1);
  for($i = -1; $i < $max; $i++) {
    $weights[$i] = $i;
  }

  // load current tracks
  foreach ((array)$node->tracks as $key => $track) {
    $form['tracks'][$weight]['artist'] = array(
      '#type' => 'textfield', '#size' => 30, '#maxlength' => 255,
      '#default_value' => $track['artist'],
      '#autocomplete_path' => 'station/autocomplete/playlist/artist',
    );
    $form['tracks'][$weight]['album'] = array(
      '#type' => 'textfield', '#size' => 30, '#maxlength' => 255,
      '#default_value' => $track['album'],
      '#autocomplete_path' => 'station/autocomplete/playlist/album',
    );
    $form['tracks'][$weight]['title'] = array(
      '#type' => 'textfield', '#size' => 30, '#maxlength' => 255,
      '#default_value' => $track['title'],
    );
    $form['tracks'][$weight]['label'] = array(
      '#type' => 'textfield', '#size' => 30, '#maxlength' => 255,
      '#default_value' => $track['label'],
      '#autocomplete_path' => 'station/autocomplete/playlist/label',
    );
    $form['tracks'][$weight]['link'] = array(
      '#type' => 'textfield', '#size' => 30, '#maxlength' => 255,
      '#default_value' => $track['link'],
    );
    $form['tracks'][$weight]['weight'] = array(
      '#type' => 'select', '#options' => $weights, '#default_value' => $weight,
    );
    $weight++;
  }
  // add some empty tracks
  for ($i = 0; $i < $blanks; $i++) {
    $form['tracks'][$weight]['artist'] = array('#type'=>'textfield',
      '#size' => 30, '#maxlength' => 255,
      '#autocomplete_path' => 'station/autocomplete/playlist/artist',
    );
    $form['tracks'][$weight]['album'] = array('#type'=>'textfield',
      '#size' => 30, '#maxlength' => 255,
      '#autocomplete_path' => 'station/autocomplete/playlist/album',
    );
    $form['tracks'][$weight]['title'] = array('#type'=>'textfield',
      '#size' => 30, '#maxlength' => 255,
    );
    $form['tracks'][$weight]['label'] = array('#type'=>'textfield',
      '#size' => 30, '#maxlength' => 255,
      '#autocomplete_path' => 'station/autocomplete/playlist/label',
    );
    $form['tracks'][$weight]['link'] = array('#type'=>'textfield',
      '#size' => 30, '#maxlength' => 255,
    );
    $form['tracks'][$weight]['weight'] = array('#type' => 'select',
      '#options' => $weights, '#default_value' => $weight,
    );
    $weight++;
  }

  return $form;
}

function theme_station_playlist_track_form($form) {
  $header = array(t('Artist'), t('Title'), t('Album'), t('Label'), t('Link'), t('Weight'));

  $rows = array();
  foreach (element_children($form) as $key) {
    $row = array();
    $row[] = drupal_render($form[$key]['artist']);
    $row[] = drupal_render($form[$key]['title']);
    $row[] = drupal_render($form[$key]['album']);
    $row[] = drupal_render($form[$key]['label']);
    $row[] = drupal_render($form[$key]['link']);
    $row[] = drupal_render($form[$key]['weight']);
    $rows[] = $row;
  }

  if (count($rows) == 0) {
    $output = '';
  }
  else {
    $output = theme('table', $header, $rows);
  }

  return $output . drupal_render($form);
}

// use this hook to convert form elements to node values
function station_playlist_validate(&$node, &$form) {
  // convert the programs title into a node id
  if (isset($node->program_title)) {
    $prog = node_load(array('type' => 'program', 'title' => $node->program_title));
    if ($prog) {
      $node->program_nid = $prog->nid;
    }
  }

  if (!isset($node->program_nid)) {
    form_set_error('program_title', t('A valid program name must be provided.'));
  }

  // check for track errors
  foreach ($node->tracks as $track) {
    if (($track['album'] || $track['label']) && !($track['artist'] || $track['title'])) {
      form_set_error('tracks]['. $track['weight'] . '][artist', t("You must provide either an artist or a title."));
      form_set_error('tracks]['. $track['weight'] . '][title');
    }
  }

  // set the title so it shows up in the preview
  form_set_value($form['title'], t('!program-title playlist for !date',
      array('!program-title' => $node->program_title, '!date' => implode('-', $node->program_date))));
}

function station_playlist_submit(&$node) {
  // convert the programs title into a node id
  if (isset($node->program_title)) {
    if ($prog = node_load(array('type' => 'program', 'title' => $node->program_title))) {
      $node->program_nid = $prog->nid;
    }
  }

  // convert the date into a timestamp
  $node->timestamp = mktime(0, 0, 0, $node->program_date['month'], $node->program_date['day'], $node->program_date['year']);
}

/**
 * Load a playlist.
 */
function station_playlist_load($node) {
  // id and time
  $extras = db_fetch_object(db_query('SELECT program_nid, timestamp FROM {station_playlist} WHERE nid = %d', $node->nid));

  // program title
  $prog = node_load($extras->program_nid);
  $extras->program_title = $prog->title;

  // program date
  $extras->program_date = array(
    'day' => date('j', $extras->timestamp),
    'month' => date('n', $extras->timestamp),
    'year' => date('Y', $extras->timestamp)
  );

  // tracks
  $extras->tracks = array();
  $result = db_query('SELECT weight, album, artist, title, label, link FROM {station_playlist_track} WHERE nid = %d ORDER BY weight', $node->nid);
  while ($track = db_fetch_array($result)) {
    $extras->tracks[] = $track;
  }

  return $extras;
}

/**
 * Insert a new playlist
 */
function station_playlist_insert($node) {
  db_query("INSERT INTO {station_playlist} (nid, program_nid, timestamp) VALUES (%d, %d, %d)", $node->nid, $node->program_nid, $node->timestamp);
  foreach ($node->tracks as $track) {
    if ($track['artist'] || $track['title']) {
      db_query("INSERT INTO {station_playlist_track} (nid, weight, artist, album, title, label, link) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s')",
        $node->nid, trim($track['weight']), trim($track['artist']), trim($track['album']), trim($track['title']), trim($track['label']), trim($track['link']));
    }
  }
}

/**
 * Delete a playlist.
 */
function station_playlist_delete($node) {
  db_query('DELETE FROM {station_playlist} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {station_playlist_track} WHERE nid = %d', $node->nid);
}

/**
 * Update a playlist.
 */
function station_playlist_update($node) {
  db_query("UPDATE {station_playlist} SET program_nid = %d, timestamp= %d WHERE nid = %d", $node->program_nid, $node->timestamp, $node->nid);
  // delete and re-add tracks
  db_query('DELETE FROM {station_playlist_track} WHERE nid = %d', $node->nid);
  foreach ($node->tracks as $track) {
    if ($track['artist'] || $track['title']) {
      db_query("INSERT INTO {station_playlist_track} (nid, weight, artist, album, title, label, link) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s')",
        $node->nid, trim($track['weight']), trim($track['artist']), trim($track['album']), trim($track['title']), trim($track['label']), trim($track['link']));
    }
  }
}

/**
 * Get a playlist ready for viewing.
 */
function station_playlist_view(&$node, $teaser = false, $page = false) {
  $node = node_prepare($node, $teaser);

  if ($page) {
    $breadcrumb = array(
      array('path' => 'station/programs', 'title' => t('Programs')),
      array('path' => 'node/'. $node->program_nid, 'title' => $node->program_title),
      array('path' => 'station/playlists/'. $node->program_nid, 'title' => t('Playlists')),
      array('path' => 'node/'. $node->nid),
    );
    menu_set_location($breadcrumb);
  }

  if (!$teaser) {
    if (count($node->tracks) > 0) {
      $rows = array();
      // make one pass to figure out what fields we've got...
      $hasAlbum = $hasLabel = $hasLink = FALSE;
      foreach ((array) $node->tracks as $track) {
        $hasAlbum |= (bool) ($track['album']);
        $hasLabel |= (bool) ($track['label']);
        $hasLink |= (bool) ($track['link']);
      }
      $header = array(t('Artist'), t('Title'));
      if ($hasAlbum) {
        $header[] = t('Album');
      }
      if ($hasLabel) {
        $header[] = t('Label');
      }
      if ($hasLink) {
        $header[] = t('Link');
      }
      // ...then put the into the table
      foreach ((array) $node->tracks as $track) {
        if ($track['artist'] || $track['title']) {
          $row = array(
            check_plain($track['artist']),
            check_plain($track['title']),
          );
          if ($hasAlbum) {
            $row[] = check_plain($track['album']);
          }
          if ($hasLabel) {
            $row[] = check_plain($track['label']);
          }
          if ($hasLink) {
            if ($track['link']) {
              // Use the host name as a link text
              $parts = parse_url(url($track['link'], NULL, NULL, TRUE));
              $row[] = l($parts['host'], $track['link']);
            }
            else {
              $row[] = '';
            }
          }
          $rows[] = $row;
        }
      }

      $node->content['tracks'] = array(
        '#value' => theme('table', $header, $rows),
        '#title' => 'Tracks',
        '#weight' => 0,
      );
    }
  }
  return $node;
}

/**
 * Implementation of hook_nodeapi().
 */
function station_playlist_nodeapi(&$node, $op, $teaser, $page) {
  if ($node->type == 'program'){
    switch ($op) {
      case 'view':
        if (!$teaser) {
          // playlists
          $time = time();
          $time_format = 'F j, Y';

          // pull all future playlists
          $future_lists = array();
          $result = db_query('SELECT p.nid, p.timestamp FROM {station_playlist} p INNER JOIN {node} n ON p.program_nid = n.nid WHERE n.status = 1 AND p.program_nid = %d AND p.timestamp > %d ORDER BY timestamp', $node->nid, $time);
          while ($playlist = db_fetch_object($result)) {
            $future_lists[] = l(format_date($playlist->timestamp, 'custom', $time_format, 0), 'node/'. $playlist->nid);
          }
          if ($future_lists) {
            $node->content['playlists_future'] = array(
              '#type' => 'item',
              '#value' => '<ul><li>'. implode('</li><li>', $future_lists) .'</li></ul>',
              '#title' => 'Upcoming shows',
              '#weight' => 1,
            );
          }

          // pull N recent playlists
          $past_lists = array();
          $result = db_query_range('SELECT p.nid, p.timestamp FROM {station_playlist} p INNER JOIN {node} n ON p.program_nid = n.nid WHERE n.status = 1 AND p.program_nid = %d AND p.timestamp < %d ORDER BY timestamp DESC', $node->nid, $time, 0, 5);
          while ($playlist = db_fetch_object($result)) {
            $past_lists[] = l(format_date($playlist->timestamp, 'custom', $time_format, 0), 'node/'. $playlist->nid);
          }
          if ($past_lists) {
            $node->content['playlists_past'] = array(
              '#type' => 'item',
              '#value' => '<ul><li>'. implode('</li><li>', $past_lists) .'</li></ul>',
              '#title' => 'Previous shows',
              '#weight' => 2,
            );
          }
        }
        break;
    }
  }
}


/**
 * Retrieve a pipe delimited string of autocomplete suggestions for playlist
 * items.
 */
function station_playlist_autocomplete($field = '', $string = '') {
  $matches = array();
  if (in_array($field, array('artist', 'title', 'album', 'label'))) {
    $result = db_query_range('SELECT DISTINCT %s AS val FROM {station_playlist_track} WHERE LOWER(%s) LIKE LOWER("%s%%") ORDER BY val', $field, $field, $string, 0, 10);
    while ($item = db_fetch_object($result)) {
      $matches[$item->val] = check_plain($item->val);
    }
  }
  print drupal_to_js($matches);
  exit();
}
