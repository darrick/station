<?php

/**
 * @file
 * Install, update and uninstall functions for the station_program module.
 */

/**
 * Implements hook_install().
 */
function station_program_install() {
  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  // We define the station_program node type as an associative array.
  $station_program = array(
    'type' => 'station_program',
    'name' => $t('Program'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('A radio program that you can schedule.'),
    'has_title' => TRUE,
    'title_label' => $t('Title'),
    // 'custom' attribute set to TRUE defines that the content type will
    // be deletable from the UI.
    'custom' => TRUE,
    'module' => 'station_program', 
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($station_program);

  // We add a body field and set the body label immediately.
  // We can add a field before having created the content type.
  node_add_body_field($content_type, $t('Program Description'));

  // Save the content type
  $status = node_type_save($content_type);

  // Load the instance definition for our content type's body and change
  // it's description.
  // http://api.drupal.org/api/function/field_info_instance/7
  $body_instance = field_info_instance('node', 'body', 'station_program');
  $body_instance['description'] = $t('"Free form description of the show.');
  
  // Save our changes to the title body instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  field_update_instance($body_instance);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_station_program_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_station_program_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $station_program['type'];
    field_create_instance($instance);
  }

  // Create messages that will be displayed on content type creation.
  // Replacement rule for the messages.
  $t_args = array('%name' => $content_type->name);
  if ($status == SAVED_UPDATED) { // update case
    drupal_set_message($t('The content type %name has been updated.', $t_args));
  }
  elseif ($status == SAVED_NEW) { // create case
    drupal_set_message($t('The content type %name has been added.', $t_args));
    watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/types'));
  }
}


/**
 * Implements hook_uninstall().
 */
function station_program_uninstall() {
  // Gather all the station_program content that might have been created 
  // while this module was enabled. Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'station_program'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_station_program_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the station_program
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'station_program');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('station_program');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * station_program_install() and station_program_uninstall().
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup station_program
 */
function _station_program_installed_fields() {
  $t = get_t();
  return array(

    'station_program_genre' => array(
      'field_name' => 'station_program_genre',
      'type' => 'text',
      'settings' => array(
        'maxlength' => 200,
      )
    ),
    'station_program_url' => array(
      'field_name' => 'station_program_url',
      'type' => 'link_field',
    ),
    'field_station_program_css_class' => array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'max_length' => '255',
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_station_program_css_class' => array(
                'value' => 'field_station_program_css_class_value',
                'format' => 'field_station_program_css_class_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_station_program_css_class' => array(
                'value' => 'field_station_program_css_class_value',
                'format' => 'field_station_program_css_class_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array(
            'format' => 'format',
          ),
        ),
      ),
      'indexes' => array(
        'format' => array(
          'format',
        ),
      ),
      'field_name' => 'field_station_program_css_class',
      'type' => 'text',
      'module' => 'text',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'value' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => FALSE,
        ),
        'format' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          'station_program',
        ),
      ),
    ),
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 *
 * This is factored into this function so it can be used in both
 * station_program_install() and station_program_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 * @ingroup station_program
 */
function _station_program_installed_instances() {
  $t = get_t();
  return array(
    'station_program_genre' => array(
      'field_name' => 'station_program_genre',
      'label' => $t('Genre'),
      'description' => $t('A free-form description of the musical genres played on the program.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'text_textfield',
        'weight' => '-2',
      ),
    ),
    'station_program_url' => array(
      'field_name' => 'station_program_url',
      'label' => $t('Homepage URL'),
      'description' => $t('Link to the program\'s website.'),
    ),
    'field_station_program_css_class' => array(
      'label' => 'Css class for schedule',
      'widget' => array(
        'weight' => '3',
        'type' => 'text_textfield',
        'module' => 'text',
        'active' => 1,
        'settings' => array(
          'size' => '60',
        ),
      ),
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
          'type' => 'text_default',
          'settings' => array(),
          'module' => 'text',
          'weight' => 4,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
          'settings' => array(),
          'weight' => 0,
        ),
        'example_node_list' => array(
          'type' => 'hidden',
          'label' => 'above',
          'settings' => array(),
          'weight' => 0,
        ),
      ),
      'required' => 0,
      'description' => 'Add a ccs class that will be outputted on the schedule view. Useful for setting colors or fonts per program on the schedule view. Only numbers, letters, underscores and dashes allowed.',
      'default_value' => NULL,
      'field_name' => 'field_station_program_css_class',
      'entity_type' => 'node',
      'bundle' => 'station_program',
      'deleted' => '0',
    ),
  );
}
