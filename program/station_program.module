<?php

define('STATION_PROGRAM_CVS_ID', '$Id$');

if (module_exists('views')) {
  require_once(drupal_get_path('module', 'station_program') .'/views.inc');
  require_once(drupal_get_path('module', 'station_program') .'/views_defaults.inc');
}

/**
 * Implementation of hook_help().
 */
function station_program_help($section='') {
  switch ($section) {
    case 'admin/settings/station/program':
      return t("These settings allow you to configure the station's program node.");
    default:
      return NULL;
  }
}

/**
 * Implementation of hook_menu().
 */
function station_program_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/station/program',
      'title' => t('Program'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('station_program_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_LOCAL_TASK
    );

    $items[] = array(
      'path' => 'station/autocomplete/program',
      'title' => t('program autocomplete'),
      'callback' => 'station_program_autocomplete',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
  }
  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function station_program_node_info() {
  return array(
    'station_program' => array(
      'name' => t('Program'),
      'module' => 'station_program',
      'description' => t('A radio program that you can schedule.'),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function station_program_perm() {
  return array(
    'edit program content',
    'edit own program content',
    'administer programs',
  );
}

function station_program_admin_settings() {
  $form['station_program_redirect_on_add'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add multiple programs'),
    '#default_value' => variable_get('station_program_redirect_on_add', TRUE),
    '#description' => t('If this is checked after adding a new program node you will be redirected back to the new program form. This is much more convenient when entering multiple programs.'),
  );
  $form['module_cvs_id'] = array(
    '#type' => 'item',
    '#value' => '<pre>'. STATION_PROGRAM_CVS_ID .'</pre>',
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_access().
 */
function station_program_access($op, $node) {
  global $user;

  switch ($op) {
    case 'view':
      return user_access('access content');
      break;

    case 'update':
      if (user_access('edit program content')) {
        return TRUE;
      }

      // Node owner and DJs can also edit the program.
      $djs = _station_schedule_program_load_djs($node->nid);
      if ($node->uid == $user->uid || isset($djs[$user->uid])) {
        return user_access('edit own program content');
      }
      break;

    case 'delete':
    case 'create':
    default:
      // If the schedule is enabled, defer to that permision.
      if (module_exists('station_schedule')) {
        return user_access('administer schedule');
      }
      return user_access('administer programs');
  }
}

/**
 * Implementation of hook_form().
 */
function station_program_form(&$node) {
  $type = node_get_types('type', $node);

  // Make it a little easier when doing data entry and redirect back to the
  // add form after submitting a new program.
  if (empty($node->nid) && variable_get('station_program_redirect_on_add', TRUE)) {
    $form['#redirect'] = 'node/add/station-program';
  }

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => $node->title,
    '#required' =>  TRUE,
    '#maxlength' =>  128,
    '#description' => t('The name of the program. You should avoid making major changes to this without telling the programming director.'),
  );
  $form['genre'] = array(
    '#type' => 'textfield',
    '#title' => t('Text genre'),
    '#description' => t('A free-form description of the musical genres played on the program.'),
    '#default_value' => $node->genre,
    '#required' =>  true,
    '#maxlength' => 200,
    '#weight' => -2,
  );
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Homepage URL'),
    '#description' => t("Link to the program's website."),
    '#default_value' => $node->url,
    '#maxlength' =>  255,
    '#weight' => -1,
  );
  if ($type->has_body) {
    $form['body_filter']['body'] = array(
      '#type' => 'textarea',
      '#title' => check_plain($type->body_label),
      '#default_value' => $node->body,
      '#rows' => 10,
      '#required' => ($type->min_word_count > 0),
      '#description' => t("Free form description of the show."),
    );
    $form['body_filter']['format'] = filter_form($node->format);
  }

  return $form;
}

/**
 * Implementation of hook_validate().
 */
function station_program_validate(&$node) {
  // check the url
  if ($node->url) {
    if (!valid_url($node->url)) {
      form_set_error('url', t('You need to provide a valid URL.'));
    }
  }
}

/**
 * Implementation of hook_load().
 */
function station_program_load($node) {
  return db_fetch_object(db_query('SELECT genre, url FROM {station_program} WHERE vid = %d', $node->vid));
}

/**
 * Implementation of hook_insert().
 */
function station_program_insert($node) {
  db_query("INSERT INTO {station_program} (nid, vid, genre, url) VALUES (%d, %d, '%s', '%s')", $node->nid, $node->vid, $node->genre, $node->url);
}

/**
 * Implementation of hook_delete().
 */
function station_program_delete($node) {
  db_query('DELETE FROM {station_program} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_update().
 */
function station_program_update($node) {
  db_query("UPDATE {station_program} SET genre = '%s', url = '%s' WHERE vid = %d", $node->genre, $node->url, $node->vid);
}

/**
 * Implementation of hook_view().
 */
function station_program_view(&$node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  if ($teaser) {
    $node->content['genre'] = array(
      '#value' => $node->genre,
      '#weight' => -2,
    );
  }
  else {
    $node->content['genre'] = array(
      '#type' => 'item',
      '#title' => t('Genre'),
      '#value' => $node->genre,
      '#weight' => -6,
    );
    if ($node->url) {
      $node->content['homepage'] = array(
        '#type' => 'item',
        '#title' => t('Homepage'),
        '#value' => l($node->url, $node->url),
        '#weight' => 1,
      );
    }
  }
  return $node;
}


/**
 * Retrieve a pipe delimited string of autocomplete suggestions for existing programs
 */
function station_program_autocomplete($string = '') {
  $matches = array();
  $result = db_query_range("SELECT DISTINCT title FROM {node} WHERE type = 'station_program' AND LOWER(title) LIKE LOWER('%s%%') AND status = 1 ORDER BY title", $string, 0, 10);
  while ($program = db_fetch_object($result)) {
    $matches[$program->title] = check_plain($program->title);
  }
  print drupal_to_js($matches);
  exit();
}
