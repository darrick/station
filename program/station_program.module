<?php

/**
 * Implements hook_help().
 */
function station_program_help($path, $arg) {
  switch ($path) {
    case 'admin/config/station/program':
      return t("These settings allow you to configure the station's program node.");
  }
}

/**
 * Implements hook_menu().
 */
function station_program_menu() {
  $items['station/autocomplete/program'] = array(
    'title' => 'Program autocomplete',
    'page callback' => 'station_program_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function station_program_permission() {
  return array(
    'administer_station_programs' => array(
      'title' => t('administer station programs'),
      'description' => t('TODO Add a description for \'administer station programs\''),
    ),
    'view_station_program_content' => array(
      'title' => t('view station program content'),
      'description' => t('TODO Add a description for \'view station program content\''),
    ),
    'create_station_program_content' => array(
      'title' => t('create station program content'),
      'description' => t('TODO Add a description for \'create station program content\''),
    ),
    'edit_any_station_program_content' => array(
      'title' => t('edit any station_program content'),
      'description' => t('TODO Add a description for \'edit any station program content\''),
    ),
    'edit_own_station_program_content' => array(
      'title' => t('edit own station program content'),
      'description' => t('TODO Add a description for \'edit own station program content\''),
    ),
    'delete_any_station_program_content' => array(
      'title' => t('delete any station program content'),
      'description' => t('TODO Add a description for \'delete any station program content\''),
    ),
    'delete_own_station_program_content' => array(
      'title' => t('delete own station program content'),
      'description' => t('TODO Add a description for \'delete own station program content\''),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function station_program_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if ($type == 'station_program') {
    if (user_access('administer_station_programs', $account)) {
      return NODE_ACCESS_ALLOW;
    }

    switch ($op) {
      case 'view':
        if ($node->status && user_access('view_station_program_content', $account)) {
          return NODE_ACCESS_ALLOW;
        }

      case 'update':
        if (user_access('edit_any_station_program_content', $account)) {
          return NODE_ACCESS_ALLOW;
        }

        // The node owner can edit the program.
        if (user_access('edit_own_station_program_content', $account)) {
          // If the schedule is enabled, let DJs edit the program.
          if (module_exists('station_schedule')) {
            if (!empty($node->field_station_program_dj)) {
              foreach ($node->field_station_program_dj as $delta => $user) {
                if ($user['uid'] == $account->uid) {
                  return NODE_ACCESS_ALLOW;
                }
              }
            }
          }
        }
        return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_validate().
 */
function station_program_node_validate($node, $form, &$form_state) {
  if ($node->type == 'station_program') {
    $css_class = field_get_items('node', $node, 'field_station_program_css_class');
    //if (!preg_match('/^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/', $css_class[0]['value'])) {
    if (!preg_match('/^[_a-zA-Z0-9-]*$/', $css_class[0]['value'])) {
      form_set_error('field_station_program_css_class', 'Not a valid css class name.');
    }
  }
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions for existing programs
 */
function station_program_autocomplete($string = '') {
  $matches = array();
  $result = db_query_range("SELECT DISTINCT title, nid FROM {node} WHERE type = :type AND LOWER(title) LIKE LOWER(:str) AND status = :status ORDER BY title", 0, 10, array(':type' => 'station_program', ':status' => 1, ':str' => '%' . $string . '%'));
  foreach ($result as $program) {
    $matches[$program->title] = check_plain($program->title);
  }
  print drupal_json_encode($matches);
  exit();
}
