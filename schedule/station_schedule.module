<?php

define('STATION_SCHEDULE_CVS_ID', '$Id$');

if (module_exists('views')) {
  require_once(drupal_get_path('module', 'station_schedule') .'/views.inc');
  require_once(drupal_get_path('module', 'station_schedule') .'/views_defaults.inc');
}


/**
 * Display help and module information
 * @param section which section of the site we're displaying help
 * @return help text for section
 */
function station_schedule_help($section='') {
  switch ($section) {
    case 'admin/content/schedule':
      return t('Use this page to make changes to the schedule. You can select which programs air at what time.');
    case 'admin/settings/station/schedule':
      return t("These settings allow you to configure the station's schedule.");
    case 'station/schedule':
      $output = '';
      if (station_has_archive()) {
        $output .= t('The !listen_img listen link will take you to the list of archived copies of a show. The !rss_img link will take you to an RSS feed of the archived copies suitable for podcasting.',
          array(
            '!listen_img' => theme('image', drupal_get_path('module', 'station_schedule') . '/images/listen_tiny.gif', 'listen'),
            '!rss_img' =>  theme('image', drupal_get_path('module', 'station_schedule') . '/images/rss_tiny.gif', 'podcast'),
          )
        );
      }
      return $output;
    default:
      return null;
  }
}

function station_schedule_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/content/schedule',
      'title' => t('Station schedule'),
      'callback' => 'station_schedule_admin_list',
      'access' => user_access('administer schedule'),
      'description' => t("Alter the Station's schedule."),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/content/schedule/list',
      'title' => t('List'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10
    );
    $items[] = array(
      'path' => 'admin/content/schedule/add',
      'title' => t('Add new'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('station_schedule_admin_form', 'add'),
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/content/schedule/edit',
      'title' => t('Edit schedule item'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('station_schedule_admin_form', 'edit'),
      'type' => MENU_CALLBACK
    );
    $items[] = array(
      'path' => 'admin/content/schedule/remove',
      'title' => t('Remove schedule item'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('station_schedule_admin_remove'),
      'type' => MENU_CALLBACK
    );

    $items[] = array(
      'path' => 'admin/settings/station/schedule',
      'title' => t('Schedule'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('station_schedule_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_LOCAL_TASK
    );

    $items[] = array(
      'path' => 'schedule',
      'callback' => 'station_schedule_redirect_old',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );

    $items[] = array(
      'path' => 'station/schedule',
      'title' => t('Schedule'),
      'callback' => 'station_schedule_today_page',
      'access' => user_access('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'station/schedule/week',
      'title' => t('Full week'),
      'callback' => 'station_schedule_week_page',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
  }
  else {
    // days of the week schedule...
    $today = station_today();
    foreach (station_day_name() as $day => $dayname) {
      $items[] = array(
        'path' => 'station/schedule/' . strtolower($dayname),
        'title' => t(substr($dayname, 0, 3)),
        'callback' => 'station_schedule_day_page',
        'callback arguments' => array($day),
        'type' => ($today == $day) ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
        'weight' => $day,
      );
    }
  }

  return $items;
}


/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the station module
 */
function station_schedule_perm() {
  return array(
    'administer schedule',
  );
}

function station_schedule_admin_settings() {
  $form = array();

  $form['station_schedule_increment'] = array(
    '#type' => 'select',
    '#title' => t('Time increment'),
    '#default_value' => variable_get('station_schedule_increment', 60),
    '#options' => array(15 => t('15 Minutes'), 30 => t('30 Minutes'), 60 => t('1 Hour')),
    '#description' => t("This is the minimum increment that programs can be scheduled in. <strong>Watch out:</strong> Changing this to a larger value on an existing schedule will probably cause wierdness."),
    '#required' => TRUE,
  );

  $form['station_schedule_dj_title'] = array(
    '#type' => 'textfield',
    '#title' => t('DJ title'),
    '#default_value' => variable_get('station_schedule_dj_title', 'DJs'),
    '#description' => t("This setting lets you determine what you'd like to call the users associated with programs."),
    '#required' => TRUE,
  );

  $form['station_schedule_program_node_type'] = array(
    '#type' => 'item',
    '#title' => t('Scheduled node type'),
    '#value' => t('The schedule is using the %type node provided by the %module module.', array('%type' => 'program', '%module' => node_get_types('module', 'program'))),
  );

  $form['module_cvs_id'] = array(
    '#type' => 'item',
    '#value' => '<pre>'. STATION_SCHEDULE_CVS_ID .'</pre>',
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_link().
 *
 * This is implemented so that an edit link is displayed for users who have
 * the rights to edit a node.
 */
function station_schedule_link($type, $node = NULL, $teaser = FALSE) {
  if ($type == 'node') {
    switch ($node->type) {
    case 'program':
      return station_schedule_archive_links($node->nid);
    case 'station_playlist':
      if (!$teaser && $node->program_nid) {
        return station_schedule_archive_links($node->program_nid);
      }
    }
  }
  return array();
}

/**
 * Load listen links for a program.
 * @param $program_nid Node id of the program.
 * @param $short bool true for short version of links
 */
function station_schedule_archive_links($program_nid, $short = FALSE) {
  $archive_url = station_get_archive_url();
  $may_archive = db_result(db_query('SELECT COUNT(*) FROM {station_schedule} s WHERE s.program_nid = %s AND s.may_archive = 1', $program_nid));

  if ($archive_url && $may_archive ) {
    $listen_url = $archive_url . $program_nid;
    $rss_url = $archive_url . $program_nid .'/feed';

    $listen_img = drupal_get_path('module', 'station_schedule') .'/images/listen_tiny.gif';
    $rss_img = drupal_get_path('module', 'station_schedule') .'/images/rss_tiny.gif';

    return array(
      'station_archive_listen' => array(
        'href' => $listen_url,
        'title' => theme('image', $listen_img, t('Listen')) . (($short) ? '' : ' '. t('Listen to previous')),
        'attributes' => array('title' => t('Listen to previous broadcasts of this show')),
        'html' => TRUE,
      ),
      'station_archive_rss' => array(
        'href' => $rss_url,
        'title' => theme('image', $rss_img, t('Podcast'))  . (($short) ? '' : ' '. t('Subscribe to podcast')),
        'attributes' => array('title' => t('Grab this show with your podcast software')),
        'html' => TRUE,
      ),
    );
  }
}

/**
 * Implements hook_user() to associate programs with the users.
 */
function station_schedule_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
  case 'load':
    // load the dj's programs.
    $user->programs = array();
    $result = db_query('SELECT n.nid, n.title FROM {node} n INNER JOIN {station_dj} d ON n.nid = d.program_nid WHERE d.uid = %d ORDER BY n.title', $user->uid);
    while ($program = db_fetch_object($result)) {
      $user->programs[$program->nid] = $program->title;
    }
    break;
  case 'view':
    if ($user->programs) {
      foreach($user->programs as $nid => $title) {
        $node = node_load($nid);
        $node = node_build_content($node, TRUE, FALSE);
        $items[] = array('title' => l($title, 'node/'. $nid),
          'class' => 'program',
          'value' => $node->content['genre']['#value'] . $node->content['times']['#value'],
        );
      }
      return array(t('Programs') => $items);
    }
    break;
  case 'delete':
    db_query('DELETE FROM {station_dj} WHERE uid = %d', $user->uid);
    break;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function station_schedule_nodeapi(&$node, $op, $teaser, $page) {
  if ($node->type == 'program') {
    switch ($op) {
      case 'validate':
        // validate the usernames
        foreach ($node->djs as $key => $dj) {
          if ($dj['username']) {
            $user = user_load(array('name' => $dj['username']));

            if (!$user->uid) {
              form_set_error("djs][$key][username", t('You need to specify a valid user name.'));
            }
          }
        }
        break;

      case 'submit':
        // make a copy of the djs and put them back in the expected form
        $djs = (array) $node->djs;
        $node->djs = array();
        foreach ($djs as $key => $dj) {
          if ($dj['username']) {
            $user = user_load(array('name' => $dj['username']));
            if ($user->uid) {
              $node->djs[$user->uid] = $user->name;
            }
          }
        }
        break;

      case 'insert':
        // dj additions
        foreach ($node->djs as $uid => $username) {
          db_query('INSERT INTO {station_dj} (uid, program_nid) VALUES (%d, %d)', $uid, $node->nid);
        }
        break;

      case 'update':
        // only schedule admins should be able to add or remove djs
        if (user_access('administer schedule')) {
          // dj removals
          db_query('DELETE FROM {station_dj} WHERE program_nid = %d', $node->nid);

          // dj additions
          foreach ($node->djs as $uid => $username) {
            db_query('INSERT INTO {station_dj} (uid, program_nid) VALUES (%d, %d)', $uid, $node->nid);
          }
        }
        break;

      case 'delete':
        db_query('DELETE FROM {station_dj} WHERE program_nid = %d', $node->nid);
        break;

      case 'load':
        // load the program's users under djs.
        $node->djs = _station_schedule_program_load_djs($node->nid);
        break;

      case 'view':
        if ($page) {
          $breadcrumb = array();
          $breadcrumb[] = array('path' => 'station/programs', 'title' => t('Programs'));
          $breadcrumb[] = array('path' => 'node/'. $node->nid);
          menu_set_location($breadcrumb);
        }

        // make djs into links
        $djs = station_schedule_program_get_themed_djs($node->nid);

        $times = station_schedule_program_get_themed_times($node->nid);

        if ($teaser) {
          $node->content['djs'] = array(
            '#value' => t(' with !djs', array('!djs' => station_anded_list($djs))),
            '#weight' => -1,
          );
          $node->content['times'] = array(
            '#value' => $times ? t(' on @times.', array('@times' => station_anded_list($times))) : t(' is not currently scheduled.'),
            '#weight' => 0,
          );
        }
        else {
          $djs_title = variable_get('station_schedule_dj_title', 'DJs');
          $node->content['djs'] = array(
            '#type' => 'item',
            '#title' => $djs_title,
            '#value' => $djs ? theme('item_list', $djs) : t('This program has no @dj-title.', array('@dj-title' => $djs_title)),
            '#weight' => -5,
          );
          $node->content['times'] = array(
            '#type' => 'item',
            '#title' => t('Times'),
            '#value' => $times ? theme('item_list', $times) : t('This program is currently unscheduled.'),
            '#weight' => -4,
          );
        }
        break;
    }
  }
}


/**
 * implementation of hook_form_alter()
 */
function station_schedule_form_alter($form_id, &$form) {
  // We only alter audio node edit forms
  if ($form_id == 'program_node_form') {
    $node = $form['#node'];

    if (user_access('administer schedule')) {
      // if it's a saved display the scheduled times.
      if ($node->nid) {
        $form['schedule'] = array(
          '#type' => 'fieldset',
          '#title' => t('Schedule'),
          '#weight' => 1,
          '#tree' => TRUE,
          '#description' => t("These are the times the program is currently scheduled."),
        );
        $times = _station_schedule_program_load_times($node->nid);
        foreach ($times as $time) {
          $form['schedule'][$time['sid']] = array(
            '#type' => 'item',
            '#value' => l(theme('station_dayhour_range', $time['start'], $time['finish']), 'admin/content/schedule/edit/'. $time['sid']),
          );
        }
        // don't encourage adding unpublished stuff to the schedule.
        if ($node->status) {
          $form['schedule']['new'] = array(
            '#type' => 'item',
            '#value' => t("<a href='!link'>Add to the schedule</a>", array('!link' => url('admin/content/schedule/add/'. $node->nid))),
          );
        }
      }
      $form['djs'] = array(
        '#type' => 'fieldset',
        '#title' => variable_get('station_schedule_dj_title', 'DJs'),
        '#weight' => 1,
        '#tree' => TRUE,
        '#description' => t("Enter the names of users you'd like to add as @dj-title.", array('@dj-title' => variable_get('station_schedule_dj_title', 'DJs'))),
      );
      if ($node->djs) {
        foreach ((array)$node->djs as $uid => $username) {
          $form['djs'][$uid]['username'] = array(
            '#type' => 'textfield', '#maxlength' => 60,
            '#autocomplete_path' => 'user/autocomplete',
            '#default_value' => $username,
          );
        }
      }
      // add some blank username textfields
      for ($i = 0; $i < 4; $i++) {
        $form['djs']['new'. $i]['username'] = array(
          '#type' => 'textfield', '#maxlength' => 60,
          '#autocomplete_path' => 'user/autocomplete',
        );
      }
    }
  }
}

/**
 * Return an array of DJ info for a given program. The key is the user's uid
 * and the value is the user's name.
 */
function _station_schedule_program_load_djs($program_nid) {
  // load the dj's users users under the djs item.
  $djs = array();
  $result = db_query('SELECT d.uid, u.name FROM {station_dj} d INNER JOIN {users} u ON d.uid = u.uid WHERE d.program_nid = %d ORDER BY u.name', $program_nid);
  while ($dj = db_fetch_object($result)) {
    $djs[$dj->uid] = $dj->name;
  }
  return $djs;
}

/**
 * Returns an array of themed DJs.
 */
function station_schedule_program_get_themed_djs($program_nid) {
  // make djs into links
  $djs = array();
  foreach (_station_schedule_program_load_djs($program_nid) as $uid => $name) {
    $user = user_load(array('uid' => $uid));
    $djs[] = theme('username', $user);
  }
  return $djs;
}

/**
 * Returns an array of hours the program is scheduled.
 */
function _station_schedule_program_load_times($nid) {
  // load the program's scheduled times
  $i = 0;
  $hours = array();
  if ($nid) {
    $result = db_query('SELECT * FROM {station_schedule} s WHERE s.program_nid = %s ORDER BY s.start', $nid);
    while ($s = db_fetch_array($result)) {
      $hours[] = $s;
    }
  }
  return $hours;
}

/**
 * Returns a themed array of the times a program is scheduled.
 */
function station_schedule_program_get_themed_times($nid) {
  // load the program's scheduled times
  $times = array();
  foreach (_station_schedule_program_load_times($nid) as $range) {
    $times[] = theme('station_dayhour_range', $range['start'], $range['finish']);
  }
  return $times;
}

/**
 * Implementation of hook_xmlrpc().
 */
function station_schedule_xmlrpc() {
  return array(
    array(
      'station.program.get.at',
      'station_schedule_program_get_at',
      array('array', 'int'),
      t('Fetch info on the program playing at a day/hour of a given timestamp.')
    ),
  );
}

/**
 * Function to redirect old /schedule/* links to /station/schedule/*
 */
function station_schedule_redirect_old($day = '', $hour = '') {
  $path = 'station/schedule';
  if ($day) {
    $path .= "/$day";
    if ($hour) {
      $path .= "/$hour";
    }
  }
  drupal_goto($path);
}

/**
 * Get the program playing at a certain time. If no time is provide, use the
 * current time.
 *
 * @param $gmt_timestamp
 *   a timestamp used to determine the day of the week an hour.
 * @return
 *   program node object if one is scheduled, an empty object if nothing is
 *   scheduled.
 */
function station_schedule_program_get_at($gmt_timestamp) {
  // Load the schedule item based on the time.
  $ts = station_local_ts($gmt_timestamp);
  $day = date('w', $ts);
  $hour = date('G', $ts);
  $minute = station_minute_from_day_hour($day, $hour);
  $schedule = station_schedule_load_at($minute);

  // If there's an associated program, load it
  if ($schedule->program_nid) {
    if ($node = node_load($schedule->program_nid)) {
      // set this so that if the show is scheduled for multiple times the caller
      // can easily figure out which one.
      $node->may_archive = $schedule->may_archive;
      // put this in so they can use a pretty url
      $node->node_url = url('node/'. $node->nid, NULL, NULL, TRUE);
      return $node;
    }
  }
  return new stdClass;
}

/**
 * Load the schedule by its id.
 * @param $sid schedule id
 * @return schedule object
 */
function station_schedule_load($sid) {
  $result = db_query('SELECT * FROM {station_schedule} s WHERE s.sid = %d', $sid);
  if ($s = db_fetch_object($result)) {
    return $s;
  }
}

/**
 * Load the schedule by minute of the week.
 * @param $minute the minute of the week...
 * @return schedule object
 */
function station_schedule_load_at($minute) {
  $result = db_query('SELECT * FROM {station_schedule} s WHERE s.start <= %d AND s.finish > %d', $minute, $minute);
  if ($s = db_fetch_object($result)) {
    return $s;
  }
}

function station_schedule_load_day($day) {
  // there are 1440 minutes in a day (60minute * 24hours = 1day)
  $start = $day * 1440;
  $finish = $start + 1440;

  $ret = array();
  $result = db_query('SELECT * FROM {station_schedule} s WHERE s.finish > %d AND s.start < %d ORDER BY s.start', $start, $finish);
  while ($s = db_fetch_object($result)) {
    // if a show spans a day, limit its start and finish times to be with-in
    // the day
    if ($s->start < $start) {
      $s->start = $start;
    }
    if ($s->finish > $finish) {
      $s->finish = $finish;
    }
    $ret[] = $s;
  }
  return $ret;
}

function station_schedule_admin_list() {
  drupal_add_css(drupal_get_path('module', 'station_schedule') .'/station_schedule.css');

  $cols = station_day_name();
  $row = array();
  for ($i = 0; $i < 7; $i++) {
    $cell = '';
    // find the minute that the day starts and finishes
    $day_start = $i * 1440;
    $day_finish = $day_start + 1440;
    $last_finish = $day_start;
    foreach (station_schedule_load_day($i) as $s) {
      // display blocks for unscheduled time periods
      if ($last_finish != $s->start) {
        $cell .= theme('station_schedule_admin_nonitem', $last_finish, $s->start);
      }
      $last_finish = $s->finish;

      // display the schedule item
      $height = ($s->finish - $s->start);
      $program = node_load($s->program_nid);
      $cell .= theme('station_schedule_admin_item', $s->sid, $s->start, $s->finish, $program);
    }
    // any remaining time during the day
    if ($last_finish < $day_finish) {
      $cell .= theme('station_schedule_admin_nonitem', $last_finish, $day_finish);
    }

    $row[$i] = $cell;
  }

  // render the tables
  return theme('table', $cols, array($row), array('id' => 'station-sch', 'class' => 'station-sch-admin'));
}

function theme_station_schedule_admin_nonitem($start, $finish) {
  $class = 'station-sch-box station-sch-unscheduled';
  $height = ($finish - $start);
  $link = "admin/content/schedule/add/0/{$start}/{$finish}";

  $output = "<div class='{$class}' style='height:{$height}px;'>";
  $output .= '<div class="station-sch-time">'. theme('station_hour_range', $start, $finish) .'</div>';
  $output .= t('Unscheduled');
  $output .= "</div>\n";

  return l($output, $link, NULL, NULL, NULL, NULL, TRUE);
}

function theme_station_schedule_admin_item($sid, $start, $finish, $program) {
  $class = 'station-sch-box station-sch-scheduled';
  $height = ($finish - $start);
  $link = 'admin/content/schedule/edit/'. $sid;

  $output = "<div class='{$class}' style='height:{$height}px;'>";
  $output .= '<div class="station-sch-time">'. theme('station_hour_range', $start, $finish) .'</div>';
  $output .= check_plain($program->title);
  $output .= "</div>\n";

  return l($output, $link, NULL, NULL, NULL, NULL, TRUE);
}

/**
 * @param $op 'add' or 'edit'
 * @param $id when adding it's a program id. when editing, it's a schedule id.
 */
function station_schedule_admin_form($op, $id = NULL, $start = 0, $finish = 60) {
  $post_op = $_POST['op'];
  if ($post_op == t('Cancel')) {
    drupal_goto('admin/content/schedule');
  }
  if ($post_op == t('Remove')) {
    drupal_goto("admin/content/schedule/remove/$id");
  }

  $day_options = station_day_name();
  $minute_options = array();
  $increment = variable_get('station_schedule_increment', 60);
  for ($minute = 0; $minute <= 24 * 60; $minute += $increment) {
    $h = str_pad((int) ($minute / 60), 2, '0', STR_PAD_LEFT);
    $i = str_pad($minute % 60, 2, '0', STR_PAD_LEFT);
    $minute_options[$minute] = $h .':'. $i;
  }

  if ($op == 'add') {
    if ($id && $program = node_load($id)) {
      $program_title = $program->title;
    }
    $sch = new stdClass;
    $sch->sid = $id;
    $sch->start = (int) $start;
    $sch->finish = (int) $finish;
    $sch->may_archive = TRUE;
  }
  else if ($op == 'edit') {
    if ($id && $sch = station_schedule_load($id)) {
      $program = node_load($sch->program_nid);
      $program_title = $program->title;
      $form['sid'] = array(
        '#type' => 'value',
        '#value' => $sch->sid,
      );
    }
    else {
      drupal_goto('admin/content/schedule');
    }
  }

  $form['start_day'] = array(
    '#type' => 'select',
    '#title' => t('Starts'),
    '#default_value' => station_day_from_minute($sch->start),
    '#options' => $day_options,
  );
  $form['start_minutes'] = array(
    '#type' => 'select',
    '#default_value' => $sch->start % 1440,
    '#options' => $minute_options,
  );
  $form['finish_day'] = array(
    '#type' => 'select',
    '#title' => t('Ends'),
    '#default_value' => station_day_from_minute($sch->finish),
    '#options' => $day_options,
    '#description' => $description,
  );
  $form['finish_minutes'] = array(
    '#type' => 'select',
    '#default_value' => $sch->finish % 1440,
    '#options' => $minute_options,
  );
  $form['program_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Program'),
    '#description' => t("Type the name of this hour's program, or if nothing is scheduled, leave it blank."),
    '#default_value' => $program_title,
    '#maxlength' => 128,
    '#autocomplete_path' => 'station/autocomplete/program'
  );
  $form['may_archive'] = array(
    '#type' => 'checkbox',
    '#title' => t('Can be saved in Station Archive'),
    '#default_value' => $sch->may_archive,
    '#description' => t('Checking this indicates that the Station Archive module can save audio recordings of the program at this timeslot to the archive.'),
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  if ($sch->sid) {
    $form['buttons']['remove'] = array(
      '#type' => 'button',
      '#value' => t('Remove'),
    );
  }
  $form['buttons']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
  );

  return $form;
}

function station_schedule_admin_form_validate($form_id, $form_values) {
  $start = ($form_values['start_day'] * 1440) + $form_values['start_minutes'];
  $finish = ($form_values['finish_day'] * 1440) + $form_values['finish_minutes'];

  if ($start >= $finish) {
    form_set_error('finish', t("The program must start before it finishes."));
  }

  $result = db_query('SELECT count(*) AS count, min(s.start) AS start, max(s.finish) AS finish FROM {station_schedule} s WHERE s.sid <> %d AND s.finish > %d AND s.start < %d', $form_values['sid'], $start, $finish);
  if ($overlap = db_fetch_object($result)) {
    if ($overlap->count == 1) {
      form_set_error('', t("The program overlaps another scheduled item at %time.", array('%time' => theme('station_dayhour_range', $overlap->start, $overlap->finish))));
    }
    else if ($overlap->count > 1) {
      form_set_error('', t("The program overlaps %number scheduled items from %time.", array('%time' => theme('station_dayhour_range', $overlap->start, $overlap->finish), '%number' => $overlap->count)));
    }
  }

  // check for a valid program title
  if (!$prog = node_load(array('title' => $form_values['program_title'], 'type' => 'program'))) {
    form_set_error('program_title', t('You need to specify a valid program name.'));
  }
}

function station_schedule_admin_form_submit($form_id, $form_values) {
  $start = ($form_values['start_day'] * 1440) + $form_values['start_minutes'];
  $finish = ($form_values['finish_day'] * 1440) + $form_values['finish_minutes'];
  $program = node_load(array('type' => 'program', 'title' => $form_values['program_title']));

  if ($form_values['sid']) {
    db_query("UPDATE {station_schedule} SET program_nid = %d, start = %d, finish = %d, may_archive = %d WHERE sid = %d",
      $program->nid, $start, $finish, $form_values['may_archive'], $form_values['sid']);
  }
  else {
    $sid = db_next_id('{station_schedule}_sid');
    db_query("INSERT INTO {station_schedule} (sid, program_nid, start, finish, may_archive) VALUES (%d, %d, %d, %d, %d)",
      $sid, $program->nid, $start, $finish, $form_values['may_archive']);
  }
  drupal_goto('admin/content/schedule');
}

/**
 * Page to confirm the removal of a schedule item.
 */
function station_schedule_admin_remove($sid = '') {
  $sch = station_schedule_load($sid);
  if (!$sch) {
    return 'admin/content/schedule';
  }

  $program = node_load($sch->program_nid);
  $title = $program->title;
  $time = theme('station_dayhour_range', $sch->start, $sch->finish);

  $form['sid'] = array('#type' => 'value', '#value' => $sch->sid);
  $form['nid'] = array('#type' => 'value', '#value' => $sch->program_nid);
  return confirm_form(
    $form,
    t('Are you sure you want to unschedule %title at %time?', array('%title' => $program->title, '%time' => $time)),
    $_GET['destination'] ? $_GET['destination'] : 'admin/content/schedule',
    t('This action cannot be undone, but you can always re-add the program to the schedule.'),
    t('Remove'),
    t('Cancel')
  );
}

/**
 * Delete a schedule item.
 */
function station_schedule_admin_remove_submit($formid, $form) {
  if ($form['confirm']) {
    _station_send_notice('schedule', 'remove', array('nid' => $form['nid'], 'sid' => $form['sid']));
    db_query("DELETE FROM {station_schedule} WHERE sid = %d", $form['sid']);
    return 'admin/content/schedule';
  }
}


/**
 * Print a week's schedule page
 */
function station_schedule_week_page() {
  drupal_add_css(drupal_get_path('module', 'station_schedule') .'/station_schedule.css');
  drupal_set_title(t('Weekly Schedule'));

  $today = station_today();

  // build the headers
  $cols = array('data' => t('Time'));
  foreach (station_day_name() as $name) {
    $cols[] = array('data' => $name);
  }
  // ... add a class to indicate what day it is.
  $cols[$today]['class'] = 'station-sch-now-day';

  $row = array();
  // put in a column of hours
  for ($i = 0; $i < 24; $i++) {
    $cell .= theme('station_schedule_hour', $i);
  }
  $row[] = array('data' => $cell, 'id' => 'station-sch-hours');
  // now a column for each day
  for ($i = 0; $i < 7; $i++) {
    $cell = '';
    // find the minute that the day starts and finishes
    $day_start = $i * 1440;
    $day_finish = $day_start + 1440;
    $last_finish = $day_start;
    foreach (station_schedule_load_day($i) as $s) {
      // display blocks for unscheduled time before this program
      if ($last_finish != $s->start) {
        $cell .= theme('station_schedule_spacer', $last_finish, $s->start);
      }
      $last_finish = $s->finish;
      // display the schedule item
      $program = node_load($s->program_nid);
      $cell .= theme('station_schedule_item', $s->start, $s->finish, $program);
    }
    // create an unscheduled block for any remaining time
    if ($last_finish < $day_finish) {
      $cell .= theme('station_schedule_spacer', $last_finish, $day_finish);
    }

    $row[] = array('data' => $cell);
  }
  $row[$today+1]['class'] = 'station-sch-now-day';

  // render the tables
  return theme('table', $cols, array($row), array('id' => 'station-sch'));
}

function theme_station_schedule_hour($hour) {
  $class = 'station-sch-box station-sch-hour';
  $height = 60;
  $output = "<div class='{$class}' style='height:{$height}px;'>";
  $output .= station_hour_name($hour);
  $output .= "</div>\n";
  return $output;
}

function theme_station_schedule_spacer($start, $finish) {
  $class = 'station-sch-box station-sch-unscheduled';
  $height = ($finish - $start);
  $output = "<div class='{$class}' style='height:{$height}px;'>";
  $output .= "<div class='station-sch-time'>". theme('station_hour_range', $start, $finish) ."</div>";
  $output .= "</div>\n";
  return $output;
}

function theme_station_schedule_item($start, $finish, $program) {
  $class = 'station-sch-box station-sch-scheduled';
  $height = ($finish - $start);
  $output = "<div class='{$class}' style='height:{$height}px;'>\n";
  $output .= "<div class='station-sch-time'>". theme('station_hour_range', $start, $finish) ."</div>";
  $output .= check_plain($program->title);
  if ($program->djs) {
    $djs = _station_schedule_program_load_djs($program->nid);
    $djs = check_plain(implode(', ', $djs));
    $output .= "<div class='station-sch-djs'>{$djs}</div>";
  }
  $output .= "</div>\n";
  return l($output, 'node/'. $program->nid, NULL, NULL, NULL, NULL, TRUE);
}


/**
 * Today's schedule. This is just a short cut for the menu system.
 */
function station_schedule_today_page() {
  return station_schedule_day_page(station_today());
}

/**
 * Print a day's schedule page.
 */
function station_schedule_day_page($day) {
  $day = station_valid_day($day);
  $dayname = station_day_name($day);

  // one day schedule
  drupal_set_title(t('Schedule for %dayname', array('%dayname' => $dayname)));

  $rows = array();
  $row = array();
  foreach (station_schedule_load_day($day) as $hour) {
    if ($hour->program_nid) {
      $program = node_load($hour->program_nid);
      $row['time'] = array('width' => 70,
        'data' => theme('station_hour_range', $hour->start, $hour->finish));
      if (station_has_archive()) {
        $listen = '';
        foreach(station_schedule_archive_links($program->nid, TRUE) as $link) {
          $listen .= l($link['title'], $link['href'], NULL, NULL, NULL, TRUE, TRUE) .' ';
        }
        $row['listen'] = array('width' => 50, 'data' => $listen);
      }
      $row['program'] = array('width' => 240,
        'data' => l($program->title, 'node/' . $program->nid));
      $row['genre'] = array('width' => 240,
        'data' => check_plain($program->genre));
      $row['djs'] = array('width' => 200,
        'data' => implode(', ', station_schedule_program_get_themed_djs($program->nid)));

      $rows[] = $row;
    }
  }

  if ($rows) {
    if (station_has_archive()) {
      $cols = array(t('Time'), t('Listen'),  t('Program'), t('Genre'), variable_get('station_schedule_dj_title', 'DJs'));
    }
    else {
      $cols = array(t('Time'), t('Program'), t('Genre'), variable_get('station_schedule_dj_title', 'DJs'));
    }
    $output = theme('table', $cols, $rows, array('class'=>'station-sch'));
  }
  else {
    $output = t('There are no programs scheduled for %dayname', array('%dayname' => $dayname));
  }

  return '<div class="node">'. $output .'</div>';
}
