<?php

require_once(drupal_get_path('module', 'station') .'/dayhour.inc');
require_once(drupal_get_path('module', 'station') .'/program.inc');
require_once(drupal_get_path('module', 'station') .'/schedule.inc');
require_once(drupal_get_path('module', 'station') .'/station.theme');


/**
 * Display help and module information
 * @param section which section of the site we're displaying help
 * @return help text for section
 */
function station_help($section='') {
  switch ($section) {
    case 'admin/schedule':
      return t('Use this page to make changes to the schedule. You can select which programs air at what time.');
    case 'admin/modules#description':
      return t('Module to allow radio station scheduling.');
    case 'node/add#program':
      return t('A radio program that you can schedule');
    case 'admin/settings/station':
      return t('Configure the station\'s schedule.');
    case 'schedule':
      return t('The %listen_img listen link will take you to the list of archived copies of a show. The %rss_img link will take you to an RSS feed of the archived copies suitable for podcasting.',
        array(
          '%listen_img' => '<img src="' . drupal_get_path('module', 'station') . '/images/listen_tiny.gif" />',
          '%rss_img' => '<img src="' . drupal_get_path('module', 'station') . '/images/rss_tiny.gif" />',
        )
      );
    default:
      return null;
  }
}

function station_menu($may_cache) {
  if ($may_cache) {
    $items[] = array('path' => 'admin/schedule', 'title' => t('schedule'),
      'callback' => 'station_schedule_admin_list',
      'access' => user_access('administer schedule'),
      'type' => MENU_NORMAL_ITEM
    );
    $items[] = array('path' => 'admin/schedule/edit', 'title' => t('configure'),
      'callback' => 'station_schedule_admin_form',
      'type' => MENU_CALLBACK
    );

    $items[] = array(
      'path' => 'node/add/program',
      'title' => t('program'),
      'access' => user_access('administer schedule')
    );

    $items[] = array(
      'path' => 'program',
      'title' => t('programs'),
      'callback' => 'station_program_page',
      'access' => user_access('access content')
    );
    $items[] = array(
      'path' => 'program/autocomplete',
      'title' => t('program autocomplete'),
      'callback' => 'station_program_autocomplete',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'schedule',
      'title' => t('schedule'),
      'callback' => 'station_schedule_page',
      'access' => user_access('access content')
    );
    $items[] = array(
      'path' => 'schedule/weekly',
      'title' => t('Full week'),
      'callback' => 'station_schedule_page',
      'access' => user_access('access content'),
      'type' => MENU_DEFAULT_LOCAL_TASK
    );
    foreach (station_day_name() as $i => $dayname) {
      $items[] = array(
        'path' => 'schedule/' . strtolower($dayname),
        'title' => t($dayname),
        'weight' => $i,
        'access' => user_access('access content'),
        'type' => MENU_LOCAL_TASK
      );
    }
  }

  return $items;
}

/**
 * Generate HTML for the station block
 * @param string op the operation from the URL
 * @param integer delta offset
 * @returns array
 */
function station_block($op = 'list', $delta = 0) {
  // The $op parameter determines what piece of information is being requested.
  if ($op == 'list') {
    // If $op is "list", we just need to return a list of block descriptions.
    // This is used to provide a list of possible blocks to the administrator.
    $blocks[0]['info'] = t('Station: Current Program');
    return $blocks;
  } else if ($op == 'view') {
    // If $op is "view", then we need to generate the block for display
    // purposes. The $delta parameter tells us which block is being requested.
    switch ($delta) {
      case 0:
        $block['subject'] = t('On Air');
        $block['content'] = station_program_block();
        break;
    }
    return $block;
  }
}


/**
 * Implementation of hook_node_info().
 */
function station_node_info() {
  return array(
    'program' => array('name' => t('program'), 'base' => 'station_program'),
  );
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the station module
 */
function station_perm() {
  return array(
    'edit own program',
    'administer schedule',
  );
}

/**
 * the modules settings form
 */
function station_settings() {
  $form['station_stream'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webstream settings'),
  );
  $form['station_stream']['station_stream_high_url'] = array(
    '#type' => 'textfield',
    '#title' => t('High-bandwith URL'),
    '#default_value' => variable_get('station_stream_high_url', ''),
    '#description' => t('The URL of the station\'s high-bandwith webstream.'),
  );
  $form['station_stream']['station_stream_low_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Low-bandwith URL'),
    '#default_value' => variable_get('station_stream_low_url', ''),
    '#description' => t('The URL of the station\'s low-bandwith webstream.'),
  );
  return $form;
}

/**
 * Implementation of hook_link().
 *
 * This is implemented so that an edit link is displayed for users who have
 * the rights to edit a node.
 */
function station_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  if ($type == 'node') {
    switch ($node->type) {
      case 'program':
        // Don't display a redundant edit link if they are node administrators.
        if (station_program_access('update', $node) || user_access('administer nodes')) {
          $links[] = l(t('edit this program'), "node/$node->nid/edit");
        }
        if ($node->url) {
          $links[] = l(t('program homepage'), $node->url);
        }
        $links = array_merge($links, station_program_listen_links($node->nid));
        break;

      case 'schedule':
        // if there's a program load it's links (which may be to several times)
        if (isset($node->program_nid)) {
          $links = station_program_listen_links($node->program_nid);
        } else {
          // otherwise, the schedule links are fine.
          $hour = "{$node->dayname}/{$node->hourname}";
          $links[] = theme('station_listen_link', $hour, false);
          $links[] = theme('station_rss_link', $hour, false);
        }
        break;
    }
  }
  return $links;
}


/**
 * Retrieve a pipe delimited string of autocomplete suggestions for users.
 */
function station_dj_autocomplete($string = '') {
  // TODO: match user names or real names
/*
  $matches = array();
  $result = db_query_range('SELECT title FROM {node} WHERE type = \'program\' AND LOWER(title) LIKE LOWER("%%%s%%") AND status = 1 ORDER BY title', $string, 0, 10);
  while ($program = db_fetch_object($result)) {
    $matches[$program->title] = check_plain($program->title);
  }
  print drupal_implode_autocomplete($matches);
  exit();
*/
}

/**
 * Implementation of hook_xmlrpc().
 */
function station_xmlrpc() {
  return array(
    array(
      'station.program.current',
      'station_program_current',
      array(),
      t('Fetch info on the current program')
    ),
  );
}


/**
 * Convert an array to a comma separates list with an add between the last terms.
 *
 * @param $array array of items
 */
function _station_anded_list($array) {
  switch (count($array)) {
    case 0:
      return '';
    case 1:
      return $array[0];
    default:
      $last = array_pop($array);
      return implode(', ', $array) . t(' and ') . $last;
  }
}

/**
* Implementation of hook_simpletest().
*/
function station_simpletest() {
  $dir = drupal_get_path('module', 'station'). '/tests';
  $tests = file_scan_directory($dir, '\.test', array('.', '..', 'CVS', '.svn'));
  return array_keys($tests);
}
